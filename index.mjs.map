{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport isIndexMode from '@stdlib/ndarray-base-assert-is-index-mode';\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {boolean} [options.readonly] - boolean indicating whether to return a read-only vector\n* @param {string} [options.mode] - specifies how to handle indices which exceed vector dimensions\n* @param {string} [options.order] - memory layout (either row-major or column-major)\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'readonly': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'null2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\topts.readonly = options.readonly;\n\t\tif ( !isBoolean( opts.readonly ) ) {\n\t\t\treturn new TypeError( format( 'null2o', 'readonly', opts.readonly ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t\tif ( !isIndexMode( opts.mode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a valid index mode. Option: `%s`.', 'mode', opts.mode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t\tif ( !isOrder( opts.order ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a memory layout. Option: `%s`.', 'order', opts.order ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isIterableLike from '@stdlib/assert-is-iterable-like';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isArrayBuffer from '@stdlib/assert-is-arraybuffer';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport isBuffer from '@stdlib/assert-is-buffer';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport buffer from '@stdlib/ndarray-base-buffer';\nimport typedarray from '@stdlib/array-typed';\nimport copy from '@stdlib/array-base-copy';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport defaults from '@stdlib/ndarray-defaults';\nimport strides2offset from '@stdlib/ndarray-base-strides2offset';\nimport arraybuffer2buffer from '@stdlib/buffer-from-arraybuffer';\nimport array2buffer from '@stdlib/buffer-from-array';\nimport copyBuffer from '@stdlib/buffer-from-buffer';\nimport iterator2array from '@stdlib/array-from-iterator';\nimport bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\nimport ITERATOR_SYMBOL from '@stdlib/symbol-iterator';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.default' );\nvar DEFAULT_ORDER = defaults.get( 'order' );\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether a data type is a \"generic\" data type.\n*\n* @private\n* @param {string} dtype - data type\n* @returns {boolean} result\n*/\nfunction isGenericDataType( dtype ) {\n\treturn ( dtype === 'generic' );\n}\n\n/**\n* Tests whether a data type is a binary data type.\n*\n* @private\n* @param {string} dtype - data type\n* @returns {boolean} result\n*/\nfunction isBinaryDataType( dtype ) {\n\treturn ( dtype === 'binary' );\n}\n\n/**\n* Resolves the order of the output vector.\n*\n* @private\n* @param {*} options - options argument\n* @returns {string} order\n*/\nfunction resolveOrder( options ) {\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\treturn options.order;\n\t}\n\treturn DEFAULT_ORDER;\n}\n\n/**\n* Creates a one-dimensional ndarray from an ArrayBuffer.\n*\n* @private\n* @param {string} dtype - data type\n* @param {ArrayBuffer} buffer - ArrayBuffer\n* @param {NonNegativeInteger} length - number of indexed elements\n* @param {integer} stride - stride length (in units of elements)\n* @param {NonNegativeInteger} byteOffset - byte offset of the first indexed element\n* @param {string} order - memory layout (either row-major or column-major)\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=false] - boolean indicating whether to return a read-only ndarray\n* @param {string} [options.mode='throw'] - specifies how to handle indices which exceed ndarray dimensions\n* @throws {TypeError} data type must be compatible with the provided ArrayBuffer\n* @returns {ndarray} one-dimensional ndarray\n*\n* @example\n* import numel from '@stdlib/ndarray-numel';\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = arraybuffer2vector( 'float64', buf, 4, 1, 0, 'row-major' );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 4\n*\n* @example\n* import numel from '@stdlib/ndarray-numel';\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = arraybuffer2vector( 'float32', buf, 8, 1, 0, 'row-major' );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 8\n*\n* @example\n* import numel from '@stdlib/ndarray-numel';\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = arraybuffer2vector( 'float64', buf, 4, -1, 32, 'row-major' );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 4\n*\n* @example\n* import numel from '@stdlib/ndarray-numel';\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = arraybuffer2vector( 'float64', buf, 2, -1, 24, 'row-major' );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 2\n*/\nfunction arraybuffer2vector( dtype, buffer, length, stride, byteOffset, order, options ) { // TODO: consider moving to `@stdlib/ndarray/from-arraybuffer` and generalize to n-dimensions such that `length` becomes `shape` and `stride` becomes `strides`\n\tvar buf;\n\tvar sh;\n\tvar st;\n\tvar N;\n\tvar o;\n\n\tif ( isGenericDataType( dtype ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. ArrayBuffer is incompatible with the specified data type. Value: `%s`.', dtype ) );\n\t}\n\to = byteOffset;\n\n\t// Compute the number of underlying elements across which the vector view will span:\n\tN = length * stride;\n\n\t// Adjust the byte offset to point to the element marking the beginning of the view:\n\tif ( stride < 0 ) { // TODO: the following is effectively unreachable code, as provided strides are never anything other than unity; however, we keep this around in the event that we want to extract this function to a separate package and would like to maintain generality\n\t\tN *= -1;\n\t\to -= N * bytesPerElement( dtype );\n\t}\n\t// Create the underlying ndarray buffer:\n\tif ( isBinaryDataType( dtype ) ) {\n\t\tbuf = arraybuffer2buffer( buffer, o, N );\n\t} else {\n\t\tbuf = typedarray( buffer, o, N, dtype );\n\t}\n\t// Resolve ndarray meta data:\n\tsh = [ length ];\n\tst = [ stride ];\n\to = strides2offset( sh, st );\n\n\t// Return a new ndarray instance:\n\tif ( arguments.length > 6 ) {\n\t\treturn new ndarray( dtype, buf, sh, st, o, order, options );\n\t}\n\treturn new ndarray( dtype, buf, sh, st, o, order );\n}\n\n/**\n* Returns a vector having a specified data type.\n*\n* @private\n* @param {(NonNegativeInteger|Collection|ArrayBuffer|Buffer|Iterable|Options)} arg - length, typed array, array-like object, buffer, iterable, or options object\n* @param {string} dtype - data type\n* @param {(Options|null)} options - function options\n* @param {boolean} [options.readonly=false] - boolean indicating whether to return a read-only ndarray\n* @param {string} [options.mode='throw'] - specifies how to handle indices which exceed ndarray dimensions\n* @returns {(ndarray|null)} one-dimensional ndarray\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n*\n* var v = vectorWithDType( 10, 'float64', {} );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 10\n*\n* var dt = getDType( v );\n* // returns 'float64'\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n*\n* var v = vectorWithDType( [ 1, 2, 3, 4 ], 'generic', {} );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 4\n*\n* var dt = getDType( v );\n* // returns 'generic'\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = vectorWithDType( buf, 'float64', {} );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 4\n*\n* var dt = getDType( v );\n* // returns 'float64'\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n*\n* var v = vectorWithDType( {}, 'float64', null );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 0\n*\n* var dt = getDType( v );\n* // returns 'float64'\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n* import array2iterator from '@stdlib/array-to-iterator';\n*\n* var v = vectorWithDType( array2iterator( [ 1, 2, 3, 4 ] ), 'generic', {} );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 4\n*\n* var dt = getDType( v );\n* // returns 'generic'\n*/\nfunction vectorWithDType( arg, dtype, options ) {\n\tvar opts;\n\tvar buf;\n\n\t// Note: in all of the following, we delegate option validation to the ndarray constructor...\n\tif ( options === null ) {\n\t\topts = {};\n\t} else {\n\t\topts = options;\n\t}\n\t// Case: vector( length )\n\tif ( isNonNegativeInteger( arg ) ) {\n\t\tbuf = buffer( dtype, arg );\n\t\treturn new ndarray( dtype, buf, [ buf.length ], [ 1 ], 0, resolveOrder( opts ), opts );\n\t}\n\t// Case: vector( Buffer )\n\tif ( isBuffer( arg ) ) {\n\t\tif ( isGenericDataType( dtype ) ) {\n\t\t\tbuf = copy( arg );\n\t\t} else if ( isBinaryDataType( dtype ) ) {\n\t\t\tbuf = copyBuffer( arg );\n\t\t} else {\n\t\t\tbuf = typedarray( arg, dtype );\n\t\t}\n\t\treturn new ndarray( dtype, buf, [ buf.length ], [ 1 ], 0, resolveOrder( opts ), opts );\n\t}\n\t// Case: vector( collection )\n\tif ( isCollection( arg ) ) {\n\t\tif ( isGenericDataType( dtype ) ) {\n\t\t\tbuf = copy( arg );\n\t\t} else if ( isBinaryDataType( dtype ) ) {\n\t\t\tbuf = array2buffer( arg ); // note: we assume that `arg` is an array of octets\n\t\t} else {\n\t\t\tbuf = typedarray( arg, dtype );\n\t\t}\n\t\treturn new ndarray( dtype, buf, [ buf.length ], [ 1 ], 0, resolveOrder( opts ), opts );\n\t}\n\t// Case: vector( ArrayBuffer )\n\tif ( isArrayBuffer( arg ) ) {\n\t\treturn arraybuffer2vector( dtype, arg, arg.byteLength/bytesPerElement( dtype ), 1, 0, resolveOrder( opts ), opts );\n\t}\n\t// Case: vector( Iterable )\n\tif ( isIterableLike( arg ) ) {\n\t\tbuf = arg[ ITERATOR_SYMBOL ]();\n\t\tbuf = iterator2array( buf );\n\t\tif ( isBinaryDataType( dtype ) ) {\n\t\t\tbuf = array2buffer( buf );\n\t\t} else if ( !isGenericDataType( dtype ) ) {\n\t\t\tbuf = typedarray( buf, dtype );\n\t\t}\n\t\treturn new ndarray( dtype, buf, [ buf.length ], [ 1 ], 0, resolveOrder( opts ), opts );\n\t}\n\t// Case: vector( options )\n\tif ( options === null && isPlainObject( arg ) ) {\n\t\tbuf = buffer( dtype, 0 );\n\t\treturn new ndarray( dtype, buf, [ buf.length ], [ 1 ], 0, resolveOrder( arg ), arg );\n\t}\n\treturn null;\n}\n\n\n// MAIN //\n\n/**\n* Creates a vector (i.e., a one-dimensional ndarray).\n*\n* ## Notes\n*\n* -   This API is intended to match the conventions of `@stdlib/array/typed`, which has a similar signature.\n*\n* @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or iterable\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @param {string} [dtype='float64'] - data type\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=false] - boolean indicating whether to return a read-only vector\n* @param {string} [options.mode='throw'] - specifies how to handle indices which exceed vector dimensions\n* @param {string} [options.order='row-major'] - memory layout (either row-major or column-major)\n* @throws {TypeError} first argument must be either a length, typed array, array-like object, buffer, iterable, data type, or options object\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} one-dimensional ndarray\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n*\n* var arr = vector();\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 0\n*\n* var dt = getDType( arr );\n* // returns 'float64'\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n*\n* var arr = vector( 2 );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 2\n*\n* var dt = getDType( arr );\n* // returns 'float64'\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n*\n* var arr = vector( [ 1.0, 2.0 ] );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 2\n*\n* var dt = getDType( arr );\n* // returns 'float64'\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n*\n* var arr = vector( [ 1.0, 2.0 ], 'float32' );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 2\n*\n* var dt = getDType( arr );\n* // returns 'float32'\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = vector( buf );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 4\n*\n* var dt = getDType( arr );\n* // returns 'float64'\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = vector( buf, 16 );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 2\n*\n* var dt = getDType( arr );\n* // returns 'float64'\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 64 );\n* var arr = vector( buf, 16, 2 );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 2\n*\n* var dt = getDType( arr );\n* // returns 'float64'\n*/\nfunction vector() {\n\tvar nargs;\n\tvar arg0;\n\tvar arg1;\n\tvar arg2;\n\tvar arg3;\n\tvar arg4;\n\tvar buf;\n\tvar out;\n\n\tnargs = arguments.length;\n\n\t// Case: vector()\n\tif ( nargs === 0 ) {\n\t\tbuf = buffer( DEFAULT_DTYPE, 0 );\n\t\treturn new ndarray( DEFAULT_DTYPE, buf, [ buf.length ], [ 1 ], 0, DEFAULT_ORDER );\n\t}\n\targ0 = arguments[ 0 ];\n\n\t// Case: vector( arg0 );\n\tif ( nargs === 1 ) {\n\t\tif ( isDataType( arg0 ) ) {\n\t\t\treturn vectorWithDType( 0, arg0, null );\n\t\t}\n\t\tout = vectorWithDType( arg0, DEFAULT_DTYPE, null );\n\t\tif ( out === null ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, iterable, data type, or options object. Value: `%s`.', arg0 ) );\n\t\t}\n\t\treturn out;\n\t}\n\targ1 = arguments[ 1 ];\n\n\t// Case: vector( arg0, arg1 )\n\tif ( nargs === 2 ) {\n\t\t// Case: vector( dtype, options )\n\t\tif ( isDataType( arg0 ) ) {\n\t\t\tif ( arg1 === null ) {\n\t\t\t\tthrow new TypeError( format( 'null2V', arg1 ) );\n\t\t\t}\n\t\t\treturn vectorWithDType( 0, arg0, arg1 );\n\t\t}\n\t\t// Case: vector( arg0, dtype )\n\t\tif ( isDataType( arg1 ) ) {\n\t\t\tout = vectorWithDType( arg0, arg1, null );\n\t\t\tif ( out === null ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a length, ArrayBuffer, typed array, array-like object, or iterable. Value: `%s`.', arg0 ) );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\t// Case: vector( ArrayBuffer, byteOffset )\n\t\tif ( isNonNegativeInteger( arg1 ) ) {\n\t\t\tif ( !isArrayBuffer( arg0 ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2B', arg0 ) );\n\t\t\t}\n\t\t\treturn arraybuffer2vector( DEFAULT_DTYPE, arg0, (arg0.byteLength-arg1)/bytesPerElement( DEFAULT_DTYPE ), 1, arg1, DEFAULT_ORDER );\n\t\t}\n\t\t// Case: vector( arg0, options )\n\t\tif ( arg1 === null ) {\n\t\t\tthrow new TypeError( format( 'null2V', arg1 ) );\n\t\t}\n\t\tout = vectorWithDType( arg0, DEFAULT_DTYPE, arg1 );\n\t\tif ( out === null ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a length, ArrayBuffer, typed array, array-like object, or iterable. Value: `%s`.', arg0 ) );\n\t\t}\n\t\treturn out;\n\t}\n\targ2 = arguments[ 2 ];\n\n\t// Case: vector( arg0, arg1, arg2 )\n\tif ( nargs === 3 ) {\n\t\t// Case: vector( ArrayBuffer, byteOffset, dtype )\n\t\tif ( isDataType( arg2 ) ) {\n\t\t\tif ( !isArrayBuffer( arg0 ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2B', arg0 ) );\n\t\t\t}\n\t\t\tif ( !isNonNegativeInteger( arg1 ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2C', arg1 ) );\n\t\t\t}\n\t\t\treturn arraybuffer2vector( arg2, arg0, (arg0.byteLength-arg1)/bytesPerElement( arg2 ), 1, arg1, DEFAULT_ORDER );\n\t\t}\n\t\t// Case: vector( arg0, dtype, options )\n\t\tif ( isDataType( arg1 ) ) {\n\t\t\tif ( arg2 === null ) {\n\t\t\t\tthrow new TypeError( format( 'null2V', arg2 ) );\n\t\t\t}\n\t\t\tout = vectorWithDType( arg0, arg1, arg2 );\n\t\t\tif ( out === null ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a length, ArrayBuffer, typed array, array-like object, or iterable. Value: `%s`.', arg0 ) );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\t// Case: vector( ArrayBuffer, byteOffset, arg2 )\n\t\tif ( !isArrayBuffer( arg0 ) ) {\n\t\t\tthrow new TypeError( format( 'null2B', arg0 ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( arg1 ) ) {\n\t\t\tthrow new TypeError( format( 'null2C', arg1 ) );\n\t\t}\n\t\t// Case: vector( ArrayBuffer, byteOffset, length )\n\t\tif ( isNonNegativeInteger( arg2 ) ) {\n\t\t\treturn arraybuffer2vector( DEFAULT_DTYPE, arg0, arg2, 1, arg1, DEFAULT_ORDER );\n\t\t}\n\t\t// Case: vector( ArrayBuffer, byteOffset, options )\n\t\tif ( arg2 === null ) {\n\t\t\tthrow new TypeError( format( 'null2V', arg2 ) );\n\t\t}\n\t\treturn arraybuffer2vector( DEFAULT_DTYPE, arg0, (arg0.byteLength-arg1)/bytesPerElement( DEFAULT_DTYPE ), 1, arg1, resolveOrder( arg2 ), arg2 );\n\t}\n\targ3 = arguments[ 3 ];\n\n\t// Case: vector( ArrayBuffer, byteOffset, arg2, arg3 )\n\tif ( nargs === 4 ) {\n\t\tif ( !isArrayBuffer( arg0 ) ) {\n\t\t\tthrow new TypeError( format( 'null2B', arg0 ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( arg1 ) ) {\n\t\t\tthrow new TypeError( format( 'null2C', arg1 ) );\n\t\t}\n\t\t// Case: vector( ArrayBuffer, byteOffset, length, dtype )\n\t\tif ( isNonNegativeInteger( arg2 ) ) {\n\t\t\tif ( isDataType( arg3 ) ) {\n\t\t\t\treturn arraybuffer2vector( arg3, arg0, arg2, 1, arg1, DEFAULT_ORDER );\n\t\t\t}\n\t\t\t// Case: vector( ArrayBuffer, byteOffset, length, options )\n\t\t\tif ( !isPlainObject( arg3 ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2V', arg3 ) );\n\t\t\t}\n\t\t\treturn arraybuffer2vector( DEFAULT_DTYPE, arg0, arg2, 1, arg1, resolveOrder( arg3 ), arg3 );\n\t\t}\n\t\t// Case: vector( ArrayBuffer, byteOffset, dtype, options )\n\t\tif ( !isDataType( arg2 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a recognized/supported data type. Value: `%s`.', arg2 ) );\n\t\t}\n\t\tif ( !isPlainObject( arg3 ) ) {\n\t\t\tthrow new TypeError( format( 'null2V', arg3 ) );\n\t\t}\n\t\treturn arraybuffer2vector( arg2, arg0, (arg0.byteLength-arg1)/bytesPerElement( arg2 ), 1, arg1, resolveOrder( arg3 ), arg3 );\n\t}\n\targ4 = arguments[ 4 ];\n\n\t// Case: vector( ArrayBuffer, byteOffset, length, dtype, options )\n\tif ( !isArrayBuffer( arg0 ) ) {\n\t\tthrow new TypeError( format( 'null2B', arg0 ) );\n\t}\n\tif ( !isNonNegativeInteger( arg1 ) ) {\n\t\tthrow new TypeError( format( 'null2C', arg1 ) );\n\t}\n\tif ( !isNonNegativeInteger( arg2 ) ) {\n\t\tthrow new TypeError( format( 'null2F', arg2 ) );\n\t}\n\tif ( !isDataType( arg3 ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a recognized/supported data type. Value: `%s`.', arg3 ) );\n\t}\n\tif ( !isPlainObject( arg4 ) ) {\n\t\tthrow new TypeError( format( 'null2V', arg4 ) );\n\t}\n\treturn arraybuffer2vector( arg3, arg0, arg2, 1, arg1, resolveOrder( arg4 ), arg4 );\n}\n\n\n// EXPORTS //\n\nexport default vector;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isIterableLike from '@stdlib/assert-is-iterable-like';\nimport isArrayBuffer from '@stdlib/assert-is-arraybuffer';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport objectAssign from '@stdlib/object-assign';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport validate from './validate.js';\nimport main from './main.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for creating a vector (i.e., a one-dimensional ndarray).\n*\n* @param {string} dtype - data type\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=false] - boolean indicating whether to return a read-only vector by default\n* @param {string} [options.mode='throw'] - specifies the default behavior when handling indices which exceed vector dimensions\n* @param {string} [options.order='row-major'] - default memory layout (either row-major or column-major)\n* @throws {TypeError} first argument must be a supported data type\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} function for creating a vector\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n*\n* var Float32Vector = factory( 'float32' );\n*\n* var arr = new Float32Vector( [ 1, 2, 3 ] );\n* // returns <ndarray>\n*\n* var dt = getDType( arr );\n* // returns 'float32'\n*\n* var len = numel( arr );\n* // returns 3\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n*\n* var Float32Vector = factory( 'float32' );\n*\n* var arr = new Float32Vector( 3 );\n* // returns <ndarray>\n*\n* var dt = getDType( arr );\n* // returns 'float32'\n*\n* var len = numel( arr );\n* // returns 3\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n*\n* var Float32Vector = factory( 'float32' );\n*\n* var buf = new ArrayBuffer( 12 );\n* var arr = new Float32Vector( buf );\n* // returns <ndarray>\n*\n* var dt = getDType( arr );\n* // returns 'float32'\n*\n* var len = numel( arr );\n* // returns 3\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n*\n* var Float32Vector = factory( 'float32' );\n*\n* var buf = new ArrayBuffer( 12 );\n* var arr = new Float32Vector( buf, 4 );\n* // returns <ndarray>\n*\n* var dt = getDType( arr );\n* // returns 'float32'\n*\n* var len = numel( arr );\n* // returns 2\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n*\n* var Float32Vector = factory( 'float32' );\n*\n* var buf = new ArrayBuffer( 12 );\n* var arr = new Float32Vector( buf, 4, 1 );\n* // returns <ndarray>\n*\n* var dt = getDType( arr );\n* // returns 'float32'\n*\n* var len = numel( arr );\n* // returns 1\n*/\nfunction factory( dtype, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !isDataType( dtype ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a supported data type. Value: `%s`.', dtype ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\treturn vector;\n\n\t/**\n\t* Creates a vector (i.e., a one-dimensional ndarray).\n\t*\n\t* @private\n\t* @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or iterable\n\t* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n\t* @param {NonNegativeInteger} [length] - view length\n\t* @param {Options} [options] - function options\n\t* @param {boolean} [options.readonly] - boolean indicating whether to return a read-only vector\n\t* @param {string} [options.mode] - specifies how to handle indices which exceed vector dimensions\n\t* @param {string} [options.order] - memory layout (either row-major or column-major)\n\t* @throws {Error} unexpected error\n\t* @returns {ndarray} one-dimensional ndarray\n\t*/\n\tfunction vector() {\n\t\tvar options;\n\t\tvar nargs;\n\t\tvar arg0;\n\t\tvar arg1;\n\t\tvar err;\n\n\t\toptions = objectAssign( {}, opts );\n\t\tnargs = arguments.length;\n\n\t\t// Case: vector()\n\t\tif ( nargs === 0 ) {\n\t\t\treturn main( dtype, options );\n\t\t}\n\t\t// Case: vector( ArrayBuffer, byteOffset, length, options )\n\t\tif ( nargs > 3 ) {\n\t\t\terr = validate( options, arguments[ 3 ] );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\treturn main( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ], dtype, options );\n\t\t}\n\t\t// Case: vector( ArrayBuffer, byteOffset, arg2 )\n\t\tif ( nargs === 3 ) {\n\t\t\t// Case: vector( ArrayBuffer, byteOffset, length )\n\t\t\tif ( isNonNegativeInteger( arguments[ 2 ] ) ) {\n\t\t\t\treturn main( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ], dtype, options );\n\t\t\t}\n\t\t\t// Case: vector( ArrayBuffer, byteOffset, options )\n\t\t\terr = validate( options, arguments[ 2 ] );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\treturn main( arguments[ 0 ], arguments[ 1 ], dtype, options );\n\t\t}\n\t\t// Case: vector( arg0, arg1 )\n\t\tif ( nargs === 2 ) {\n\t\t\targ0 = arguments[ 0 ];\n\t\t\targ1 = arguments[ 1 ];\n\n\t\t\t// Case: vector( length, options )\n\t\t\tif ( isNonNegativeInteger( arg0 ) ) {\n\t\t\t\terr = validate( options, arg1 );\n\t\t\t\tif ( err ) {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t\treturn main( arg0, dtype, options );\n\t\t\t}\n\t\t\t// Case: vector( ArrayBuffer, arg1 )\n\t\t\tif ( isArrayBuffer( arg0 ) ) {\n\t\t\t\t// Case: vector( ArrayBuffer, byteOffset )\n\t\t\t\tif ( isNonNegativeInteger( arg1 ) ) {\n\t\t\t\t\treturn main( arg0, arg1, dtype, options );\n\t\t\t\t}\n\t\t\t\t// Case: vector( ArrayBuffer, options )\n\t\t\t\terr = validate( options, arg1 );\n\t\t\t\tif ( err ) {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t\treturn main( arg0, dtype, options );\n\t\t\t}\n\t\t\t// Case: vector( collection, options )\n\t\t\tif ( isCollection( arg0 ) ) {\n\t\t\t\terr = validate( options, arg1 );\n\t\t\t\tif ( err ) {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t\treturn main( arg0, dtype, options );\n\t\t\t}\n\t\t\t// Case: vector( iterable, options )\n\t\t\terr = validate( options, arg1 );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\treturn main( arg0, dtype, options );\n\t\t}\n\t\t// nargs === 1\n\t\targ0 = arguments[ 0 ];\n\n\t\t// Case: vector( length|ArrayBuffer|Collection|Iterable )\n\t\tif (\n\t\t\tisNonNegativeInteger( arg0 ) ||\n\t\t\tisArrayBuffer( arg0 ) ||\n\t\t\tisCollection( arg0 ) ||\n\t\t\tisIterableLike( arg0 )\n\t\t) {\n\t\t\treturn main( arg0, dtype, options );\n\t\t}\n\t\t// Case: vector( options )\n\t\terr = validate( options, arg0 );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\treturn main( dtype, options );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a vector (i.e., a one-dimensional ndarray).\n*\n* @module @stdlib/ndarray-vector-ctor\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n* import vector from '@stdlib/ndarray-vector-ctor';\n*\n* var v = vector();\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 0\n*\n* var dt = getDType( v );\n* // returns 'float64'\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n* import vector from '@stdlib/ndarray-vector-ctor';\n*\n* var v = vector( 2 );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 2\n*\n* var dt = getDType( v );\n* // returns 'float64'\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n* import vector from '@stdlib/ndarray-vector-ctor';\n*\n* var v = vector( [ 1.0, 2.0 ] );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 2\n*\n* var dt = getDType( v );\n* // returns 'float64'\n*\n* @example\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n* import vector from '@stdlib/ndarray-vector-ctor';\n*\n* var v = vector( [ 1.0, 2.0 ], 'float32' );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 2\n*\n* var dt = getDType( v );\n* // returns 'float32'\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n* import vector from '@stdlib/ndarray-vector-ctor';\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = vector( buf );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 4\n*\n* var dt = getDType( v );\n* // returns 'float64'\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n* import vector from '@stdlib/ndarray-vector-ctor';\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = vector( buf, 16 );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 2\n*\n* var dt = getDType( v );\n* // returns 'float64'\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n* import getDType from '@stdlib/ndarray-dtype';\n* import numel from '@stdlib/ndarray-numel';\n* import vector from '@stdlib/ndarray-vector-ctor';\n*\n* var buf = new ArrayBuffer( 64 );\n* var v = vector( buf, 16, 2 );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 2\n*\n* var dt = getDType( v );\n* // returns 'float64'\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport factory from './factory.js';\nimport main from './main.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"factory\": \"main.factory\" }\n"],"names":["validate","opts","options","isObject","hasOwnProp","readonly","isBoolean","TypeError","format","mode","isIndexMode","order","isOrder","DEFAULT_DTYPE","defaults","get","DEFAULT_ORDER","isGenericDataType","dtype","isBinaryDataType","resolveOrder","arraybuffer2vector","buffer","length","stride","byteOffset","buf","sh","st","N","o","bytesPerElement","arraybuffer2buffer","typedarray","strides2offset","arguments","ndarray","vectorWithDType","arg","isNonNegativeInteger","isBuffer","copy","copyBuffer","isCollection","array2buffer","isArrayBuffer","byteLength","isIterableLike","ITERATOR_SYMBOL","iterator2array","isPlainObject","vector","nargs","arg0","arg1","arg2","arg3","arg4","out","isDataType","factory","err","objectAssign","main","setReadOnly"],"mappings":"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"}