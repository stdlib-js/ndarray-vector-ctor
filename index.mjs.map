{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isIterableLike from '@stdlib/assert-is-iterable-like';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isArrayBuffer from '@stdlib/assert-is-arraybuffer';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport isBuffer from '@stdlib/assert-is-buffer';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport buffer from '@stdlib/ndarray-base-buffer';\nimport typedarray from '@stdlib/array-typed';\nimport copy from '@stdlib/array-base-copy';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport defaults from '@stdlib/ndarray-defaults';\nimport strides2offset from '@stdlib/ndarray-base-strides2offset';\nimport arraybuffer2buffer from '@stdlib/buffer-from-arraybuffer';\nimport array2buffer from '@stdlib/buffer-from-array';\nimport copyBuffer from '@stdlib/buffer-from-buffer';\nimport iterator2array from '@stdlib/array-from-iterator';\nimport bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.default' );\nvar DEFAULT_ORDER = defaults.get( 'order' );\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether a data type is a \"generic\" data type.\n*\n* @private\n* @param {string} dtype - data type\n* @returns {boolean} result\n*/\nfunction isGenericDataType( dtype ) {\n\treturn ( dtype === 'generic' );\n}\n\n/**\n* Tests whether a data type is a binary data type.\n*\n* @private\n* @param {string} dtype - data type\n* @returns {boolean} result\n*/\nfunction isBinaryDataType( dtype ) {\n\treturn ( dtype === 'binary' );\n}\n\n/**\n* Resolves the order of the output vector.\n*\n* @private\n* @param {*} options - options argument\n* @returns {string} order\n*/\nfunction resolveOrder( options ) {\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\treturn options.order;\n\t}\n\treturn DEFAULT_ORDER;\n}\n\n/**\n* Creates a one-dimensional ndarray from an ArrayBuffer.\n*\n* @private\n* @param {string} dtype - data type\n* @param {ArrayBuffer} buffer - ArrayBuffer\n* @param {NonNegativeInteger} length - number of indexed elements\n* @param {integer} stride - stride length (in units of elements)\n* @param {NonNegativeInteger} byteOffset - byte offset of the first indexed element\n* @param {string} order - memory layout (either row-major or column-major)\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=false] - boolean indicating whether to return a read-only ndarray\n* @param {string} [options.mode='throw'] - specifies how to handle indices which exceed ndarray dimensions\n* @throws {TypeError} data type must be compatible with the provided ArrayBuffer\n* @returns {ndarray} one-dimensional ndarray\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = arraybuffer2vector( 'float64', buf, 4, 1, 0, 'row-major' );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 4\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = arraybuffer2vector( 'float32', buf, 8, 1, 0, 'row-major' );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 8\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = arraybuffer2vector( 'float64', buf, 4, -1, 32, 'row-major' );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 4\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = arraybuffer2vector( 'float64', buf, 2, -1, 24, 'row-major' );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*/\nfunction arraybuffer2vector( dtype, buffer, length, stride, byteOffset, order, options ) {\n\tvar buf;\n\tvar sh;\n\tvar st;\n\tvar N;\n\tvar o;\n\n\tif ( isGenericDataType( dtype ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. ArrayBuffer is incompatible with the specified data type. Value: `%s`.', dtype ) );\n\t}\n\to = byteOffset;\n\n\t// Compute the number of underlying elements across which the vector view will span:\n\tN = length * stride;\n\n\t// Adjust the byte offset to point to the element marking the beginning of the view:\n\tif ( stride < 0 ) {\n\t\tN *= -1;\n\t\to -= N * bytesPerElement( dtype );\n\t}\n\t// Create the underlying ndarray buffer:\n\tif ( isBinaryDataType( dtype ) ) {\n\t\tbuf = arraybuffer2buffer( buffer, o, N );\n\t} else {\n\t\tbuf = typedarray( buffer, o, N, dtype );\n\t}\n\t// Resolve ndarray meta data:\n\tsh = [ length ];\n\tst = [ stride ];\n\to = strides2offset( sh, st );\n\n\t// Return a new ndarray instance:\n\tif ( arguments.length > 6 ) {\n\t\treturn new ndarray( dtype, buf, sh, st, o, order, options );\n\t}\n\treturn new ndarray( dtype, buf, sh, st, o, order );\n}\n\n/**\n* Returns a vector having a specified data type.\n*\n* @private\n* @param {(NonNegativeInteger|Collection|ArrayBuffer|Buffer|Iterable|Options)} arg - length, typed array, array-like object, buffer, iterable, or options object\n* @param {string} dtype - data type\n* @param {(Options|null)} options - function options\n* @param {boolean} [options.readonly=false] - boolean indicating whether to return a read-only ndarray\n* @param {string} [options.mode='throw'] - specifies how to handle indices which exceed ndarray dimensions\n* @returns {(ndarray|null)} one-dimensional ndarray\n*\n* @example\n* var v = vectorWithDType( 10, 'float64', {} );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 10\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var v = vectorWithDType( [ 1, 2, 3, 4 ], 'generic', {} );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 4\n*\n* var dt = v.dtype;\n* // returns 'generic'\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = vectorWithDType( buf, 'float64', {} );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 4\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var v = vectorWithDType( {}, 'float64', null );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 0\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* import array2iterator from '@stdlib/array-to-iterator';\n*\n* var v = vectorWithDType( array2iterator( [ 1, 2, 3, 4 ] ), 'generic', {} );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 4\n*\n* var dt = v.dtype;\n* // returns 'generic'\n*/\nfunction vectorWithDType( arg, dtype, options ) {\n\tvar opts;\n\tvar buf;\n\n\t// Note: in all of the following, we delegate option validation to the ndarray constructor...\n\tif ( options === null ) {\n\t\topts = {};\n\t} else {\n\t\topts = options;\n\t}\n\t// Case: new Vector( length )\n\tif ( isNonNegativeInteger( arg ) ) {\n\t\tbuf = buffer( dtype, arg );\n\t\treturn new ndarray( dtype, buf, [ buf.length ], [ 1 ], 0, resolveOrder( opts ), opts );\n\t}\n\t// Case: new Vector( Buffer )\n\tif ( isBuffer( arg ) ) {\n\t\tif ( isGenericDataType( dtype ) ) {\n\t\t\tbuf = copy( arg );\n\t\t} else if ( isBinaryDataType( dtype ) ) {\n\t\t\tbuf = copyBuffer( arg );\n\t\t} else {\n\t\t\tbuf = typedarray( arg, dtype );\n\t\t}\n\t\treturn new ndarray( dtype, buf, [ buf.length ], [ 1 ], 0, resolveOrder( opts ), opts );\n\t}\n\t// Case: new Vector( collection )\n\tif ( isCollection( arg ) ) {\n\t\tif ( isGenericDataType( dtype ) ) {\n\t\t\tbuf = copy( arg );\n\t\t} else if ( isBinaryDataType( dtype ) ) {\n\t\t\tbuf = array2buffer( arg ); // note: we assume that `arg` is an array of octets\n\t\t} else {\n\t\t\tbuf = typedarray( arg, dtype );\n\t\t}\n\t\treturn new ndarray( dtype, buf, [ buf.length ], [ 1 ], 0, resolveOrder( opts ), opts );\n\t}\n\t// Case: new Vector( ArrayBuffer )\n\tif ( isArrayBuffer( arg ) ) {\n\t\treturn arraybuffer2vector( dtype, arg, arg.byteLength/bytesPerElement( dtype ), 1, 0, resolveOrder( opts ), opts );\n\t}\n\t// Case: new Vector( Iterable )\n\tif ( isIterableLike( arg ) ) {\n\t\tif ( isGenericDataType( dtype ) ) {\n\t\t\tbuf = iterator2array( arg );\n\t\t} else if ( isBinaryDataType( dtype ) ) {\n\t\t\tbuf = array2buffer( iterator2array( arg ) ); // note: the temporary array is necessary as we cannot allocate a `Buffer` in advance due to the iterator's indeterminate length\n\t\t} else {\n\t\t\tbuf = typedarray( arg, dtype );\n\t\t}\n\t\treturn new ndarray( dtype, buf, [ buf.length ], [ 1 ], 0, resolveOrder( opts ), opts );\n\t}\n\t// Case: new Vector( options )\n\tif ( options === null && isPlainObject( arg ) ) {\n\t\tbuf = buffer( dtype, 0 );\n\t\treturn new ndarray( dtype, buf, [ buf.length ], [ 1 ], 0, resolveOrder( arg ), arg );\n\t}\n\treturn null;\n}\n\n\n// MAIN //\n\n/**\n* Creates a vector (i.e., a one-dimensional ndarray).\n*\n* @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or iterable\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @param {string} [dtype='float64'] - data type\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=false] - boolean indicating whether to return a read-only vector\n* @param {string} [options.mode='throw'] - specifies how to handle indices which exceed vector dimensions\n* @param {string} [options.order='row-major'] - memory layout (either row-major or column-major)\n* @throws {TypeError} first argument must be either a length, typed array, array-like object, buffer, iterable, data type, or options object\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} one-dimensional ndarray\n*\n* @example\n* var v = new Vector();\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 0\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var v = new Vector( 2 );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var v = new Vector( [ 1.0, 2.0 ] );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var v = new Vector( [ 1.0, 2.0 ], 'float32' );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*\n* var dt = v.dtype;\n* // returns 'float32'\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = new Vector( buf );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 4\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = new Vector( buf, 16 );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 64 );\n* var v = new Vector( buf, 16, 2 );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*/\nfunction Vector() {\n\tvar nargs;\n\tvar arg0;\n\tvar arg1;\n\tvar arg2;\n\tvar arg3;\n\tvar arg4;\n\tvar buf;\n\tvar out;\n\n\tnargs = arguments.length;\n\n\t// Case: new Vector()\n\tif ( nargs === 0 ) {\n\t\tbuf = buffer( DEFAULT_DTYPE, 0 );\n\t\treturn new ndarray( DEFAULT_DTYPE, buf, [ buf.length ], [ 1 ], 0, DEFAULT_ORDER );\n\t}\n\targ0 = arguments[ 0 ];\n\n\t// Case: new Vector( arg0 );\n\tif ( nargs === 1 ) {\n\t\tif ( isDataType( arg0 ) ) {\n\t\t\treturn vectorWithDType( 0, arg0, null );\n\t\t}\n\t\tout = vectorWithDType( arg0, DEFAULT_DTYPE, null );\n\t\tif ( out === null ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, iterable, data type, or options object. Value: `%s`.', arg0 ) );\n\t\t}\n\t\treturn out;\n\t}\n\targ1 = arguments[ 1 ];\n\n\t// Case: new Vector( arg0, arg1 )\n\tif ( nargs === 2 ) {\n\t\t// Case: new Vector( dtype, options )\n\t\tif ( isDataType( arg0 ) ) {\n\t\t\treturn vectorWithDType( 0, arg0, arg1 );\n\t\t}\n\t\t// Case: new Vector( arg0, dtype )\n\t\tif ( isDataType( arg1 ) ) {\n\t\t\tout = vectorWithDType( arg0, arg1, null );\n\t\t\tif ( out === null ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a length, ArrayBuffer, typed array, array-like object, or iterable. Value: `%s`.', arg0 ) );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\t// Case: new Vector( ArrayBuffer, byteOffset )\n\t\tif ( isNonNegativeInteger( arg1 ) ) {\n\t\t\tif ( !isArrayBuffer( arg0 ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2B', arg0 ) );\n\t\t\t}\n\t\t\treturn arraybuffer2vector( DEFAULT_DTYPE, arg0, (arg0.byteLength-arg1)/bytesPerElement( DEFAULT_DTYPE ), 1, arg1, DEFAULT_ORDER );\n\t\t}\n\t\t// Case: new Vector( arg0, options )\n\t\tout = vectorWithDType( arg0, DEFAULT_DTYPE, arg1 );\n\t\tif ( out === null ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a length, ArrayBuffer, typed array, array-like object, or iterable. Value: `%s`.', arg0 ) );\n\t\t}\n\t\treturn out;\n\t}\n\targ2 = arguments[ 2 ];\n\n\t// Case: new Vector( arg0, arg1, arg2 )\n\tif ( nargs === 3 ) {\n\t\t// Case: new Vector( ArrayBuffer, byteOffset, dtype )\n\t\tif ( isDataType( arg2 ) ) {\n\t\t\tif ( !isArrayBuffer( arg0 ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2B', arg0 ) );\n\t\t\t}\n\t\t\tif ( !isNonNegativeInteger( arg1 ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2C', arg1 ) );\n\t\t\t}\n\t\t\treturn arraybuffer2vector( arg2, arg0, (arg0.byteLength-arg1)/bytesPerElement( arg2 ), 1, arg1, DEFAULT_ORDER );\n\t\t}\n\t\t// Case: new Vector( arg0, dtype, options )\n\t\tif ( isDataType( arg1 ) ) {\n\t\t\tout = vectorWithDType( arg0, arg1, arg2 );\n\t\t\tif ( out === null ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a length, ArrayBuffer, typed array, array-like object, or iterable. Value: `%s`.', arg0 ) );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\t// Case: new Vector( ArrayBuffer, byteOffset, arg2 )\n\t\tif ( !isArrayBuffer( arg0 ) ) {\n\t\t\tthrow new TypeError( format( 'null2B', arg0 ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( arg1 ) ) {\n\t\t\tthrow new TypeError( format( 'null2C', arg1 ) );\n\t\t}\n\t\t// Case: new Vector( ArrayBuffer, byteOffset, options )\n\t\tif ( isPlainObject( arg2 ) ) {\n\t\t\treturn arraybuffer2vector( DEFAULT_DTYPE, arg0, (arg0.byteLength-arg1)/bytesPerElement( DEFAULT_DTYPE ), 1, arg1, resolveOrder( arg2 ), arg2 );\n\t\t}\n\t\t// Case: new Vector( ArrayBuffer, byteOffset, length )\n\t\tif ( !isNonNegativeInteger( arg2 ) ) {\n\t\t\tthrow new TypeError( format( 'null2F', arg2 ) );\n\t\t}\n\t\treturn arraybuffer2vector( DEFAULT_DTYPE, arg0, arg2, 1, arg1, DEFAULT_ORDER );\n\t}\n\targ3 = arguments[ 3 ];\n\n\t// Case: new Vector( ArrayBuffer, byteOffset, arg2, arg3 )\n\tif ( nargs === 4 ) {\n\t\tif ( !isArrayBuffer( arg0 ) ) {\n\t\t\tthrow new TypeError( format( 'null2B', arg0 ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( arg1 ) ) {\n\t\t\tthrow new TypeError( format( 'null2C', arg1 ) );\n\t\t}\n\t\t// Case: new Vector( ArrayBuffer, byteOffset, length, dtype )\n\t\tif ( isNonNegativeInteger( arg2 ) ) {\n\t\t\tif ( isDataType( arg3 ) ) {\n\t\t\t\treturn arraybuffer2vector( arg3, arg0, arg2, 1, arg1, DEFAULT_ORDER );\n\t\t\t}\n\t\t\t// Case: new Vector( ArrayBuffer, byteOffset, length, options )\n\t\t\tif ( !isPlainObject( arg3 ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2V', arg3 ) );\n\t\t\t}\n\t\t\treturn arraybuffer2vector( DEFAULT_DTYPE, arg0, arg2, 1, arg1, resolveOrder( arg3 ), arg3 );\n\t\t}\n\t\t// Case: new Vector( ArrayBuffer, byteOffset, dtype, options )\n\t\tif ( !isDataType( arg2 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a recognized/supported data type. Value: `%s`.', arg2 ) );\n\t\t}\n\t\tif ( !isPlainObject( arg3 ) ) {\n\t\t\tthrow new TypeError( format( 'null2V', arg3 ) );\n\t\t}\n\t\treturn arraybuffer2vector( arg2, arg0, (arg0.byteLength-arg1)/bytesPerElement( arg2 ), 1, arg1, resolveOrder( arg3 ), arg3 );\n\t}\n\targ4 = arguments[ 4 ];\n\n\t// Case: new Vector( ArrayBuffer, byteOffset, length, dtype, options )\n\tif ( !isArrayBuffer( arg0 ) ) {\n\t\tthrow new TypeError( format( 'null2B', arg0 ) );\n\t}\n\tif ( !isNonNegativeInteger( arg1 ) ) {\n\t\tthrow new TypeError( format( 'null2C', arg1 ) );\n\t}\n\tif ( !isNonNegativeInteger( arg2 ) ) {\n\t\tthrow new TypeError( format( 'null2F', arg2 ) );\n\t}\n\tif ( !isDataType( arg3 ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a recognized/supported data type. Value: `%s`.', arg3 ) );\n\t}\n\tif ( !isPlainObject( arg4 ) ) {\n\t\tthrow new TypeError( format( 'null2V', arg4 ) );\n\t}\n\treturn arraybuffer2vector( arg3, arg0, arg2, 1, arg1, resolveOrder( arg4 ), arg4 );\n}\n\n\n// EXPORTS //\n\nexport default Vector;\n"],"names":["DEFAULT_DTYPE","defaults","get","DEFAULT_ORDER","isGenericDataType","dtype","isBinaryDataType","resolveOrder","options","hasOwnProp","order","arraybuffer2vector","buffer","length","stride","byteOffset","buf","sh","st","N","o","TypeError","format","bytesPerElement","arraybuffer2buffer","typedarray","strides2offset","arguments","ndarray","vectorWithDType","arg","opts","isNonNegativeInteger","isBuffer","copy","copyBuffer","isCollection","array2buffer","isArrayBuffer","byteLength","isIterableLike","iterator2array","isPlainObject","Vector","nargs","arg0","arg1","arg2","arg3","arg4","out","isDataType"],"mappings":"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"}