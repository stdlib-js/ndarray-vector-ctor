{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isIterableLike = require( '@stdlib/assert-is-iterable-like' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isArrayBuffer = require( '@stdlib/assert-is-arraybuffer' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isBuffer = require( '@stdlib/assert-is-buffer' );\nvar isDataType = require( '@stdlib/ndarray-base-assert-is-data-type' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar buffer = require( '@stdlib/ndarray-base-buffer' );\nvar typedarray = require( '@stdlib/array-typed' );\nvar copy = require( '@stdlib/array-base-copy' );\nvar ndarray = require( '@stdlib/ndarray-ctor' );\nvar defaults = require( '@stdlib/ndarray-defaults' );\nvar strides2offset = require( '@stdlib/ndarray-base-strides2offset' );\nvar arraybuffer2buffer = require( '@stdlib/buffer-from-arraybuffer' );\nvar array2buffer = require( '@stdlib/buffer-from-array' );\nvar copyBuffer = require( '@stdlib/buffer-from-buffer' );\nvar iterator2array = require( '@stdlib/array-from-iterator' );\nvar bytesPerElement = require( '@stdlib/ndarray-base-bytes-per-element' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.default' );\nvar DEFAULT_ORDER = defaults.get( 'order' );\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether a data type is a \"generic\" data type.\n*\n* @private\n* @param {string} dtype - data type\n* @returns {boolean} result\n*/\nfunction isGenericDataType( dtype ) {\n\treturn ( dtype === 'generic' );\n}\n\n/**\n* Tests whether a data type is a binary data type.\n*\n* @private\n* @param {string} dtype - data type\n* @returns {boolean} result\n*/\nfunction isBinaryDataType( dtype ) {\n\treturn ( dtype === 'binary' );\n}\n\n/**\n* Resolves the order of the output vector.\n*\n* @private\n* @param {*} options - options argument\n* @returns {string} order\n*/\nfunction resolveOrder( options ) {\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\treturn options.order;\n\t}\n\treturn DEFAULT_ORDER;\n}\n\n/**\n* Creates a one-dimensional ndarray from an ArrayBuffer.\n*\n* @private\n* @param {string} dtype - data type\n* @param {ArrayBuffer} buffer - ArrayBuffer\n* @param {NonNegativeInteger} length - number of indexed elements\n* @param {integer} stride - stride length (in units of elements)\n* @param {NonNegativeInteger} byteOffset - byte offset of the first indexed element\n* @param {string} order - memory layout (either row-major or column-major)\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=false] - boolean indicating whether to return a read-only ndarray\n* @param {string} [options.mode='throw'] - specifies how to handle indices which exceed ndarray dimensions\n* @throws {TypeError} data type must be compatible with the provided ArrayBuffer\n* @returns {ndarray} one-dimensional ndarray\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = arraybuffer2vector( 'float64', buf, 4, 1, 0, 'row-major' );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 4\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = arraybuffer2vector( 'float32', buf, 8, 1, 0, 'row-major' );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 8\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = arraybuffer2vector( 'float64', buf, 4, -1, 32, 'row-major' );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 4\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = arraybuffer2vector( 'float64', buf, 2, -1, 24, 'row-major' );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*/\nfunction arraybuffer2vector( dtype, buffer, length, stride, byteOffset, order, options ) {\n\tvar buf;\n\tvar sh;\n\tvar st;\n\tvar N;\n\tvar o;\n\n\tif ( isGenericDataType( dtype ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. ArrayBuffer is incompatible with the specified data type. Value: `%s`.', dtype ) );\n\t}\n\to = byteOffset;\n\n\t// Compute the number of underlying elements across which the vector view will span:\n\tN = length * stride;\n\n\t// Adjust the byte offset to point to the element marking the beginning of the view:\n\tif ( stride < 0 ) {\n\t\tN *= -1;\n\t\to -= N * bytesPerElement( dtype );\n\t}\n\t// Create the underlying ndarray buffer:\n\tif ( isBinaryDataType( dtype ) ) {\n\t\tbuf = arraybuffer2buffer( buffer, o, N );\n\t} else {\n\t\tbuf = typedarray( buffer, o, N, dtype );\n\t}\n\t// Resolve ndarray meta data:\n\tsh = [ length ];\n\tst = [ stride ];\n\to = strides2offset( sh, st );\n\n\t// Return a new ndarray instance:\n\tif ( arguments.length > 6 ) {\n\t\treturn new ndarray( dtype, buf, sh, st, o, order, options );\n\t}\n\treturn new ndarray( dtype, buf, sh, st, o, order );\n}\n\n/**\n* Returns a vector having a specified data type.\n*\n* @private\n* @param {(NonNegativeInteger|Collection|ArrayBuffer|Buffer|Iterable|Options)} arg - length, typed array, array-like object, buffer, iterable, or options object\n* @param {string} dtype - data type\n* @param {(Options|null)} options - function options\n* @param {boolean} [options.readonly=false] - boolean indicating whether to return a read-only ndarray\n* @param {string} [options.mode='throw'] - specifies how to handle indices which exceed ndarray dimensions\n* @returns {(ndarray|null)} one-dimensional ndarray\n*\n* @example\n* var v = vectorWithDType( 10, 'float64', {} );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 10\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var v = vectorWithDType( [ 1, 2, 3, 4 ], 'generic', {} );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 4\n*\n* var dt = v.dtype;\n* // returns 'generic'\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = vectorWithDType( buf, 'float64', {} );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 4\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var v = vectorWithDType( {}, 'float64', null );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 0\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var array2iterator = require( '@stdlib/array-to-iterator' );\n*\n* var v = vectorWithDType( array2iterator( [ 1, 2, 3, 4 ] ), 'generic', {} );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 4\n*\n* var dt = v.dtype;\n* // returns 'generic'\n*/\nfunction vectorWithDType( arg, dtype, options ) {\n\tvar opts;\n\tvar buf;\n\n\t// Note: in all of the following, we delegate option validation to the ndarray constructor...\n\tif ( options === null ) {\n\t\topts = {};\n\t} else {\n\t\topts = options;\n\t}\n\t// Case: new Vector( length )\n\tif ( isNonNegativeInteger( arg ) ) {\n\t\tbuf = buffer( dtype, arg );\n\t\treturn new ndarray( dtype, buf, [ buf.length ], [ 1 ], 0, resolveOrder( opts ), opts );\n\t}\n\t// Case: new Vector( Buffer )\n\tif ( isBuffer( arg ) ) {\n\t\tif ( isGenericDataType( dtype ) ) {\n\t\t\tbuf = copy( arg );\n\t\t} else if ( isBinaryDataType( dtype ) ) {\n\t\t\tbuf = copyBuffer( arg );\n\t\t} else {\n\t\t\tbuf = typedarray( arg, dtype );\n\t\t}\n\t\treturn new ndarray( dtype, buf, [ buf.length ], [ 1 ], 0, resolveOrder( opts ), opts );\n\t}\n\t// Case: new Vector( collection )\n\tif ( isCollection( arg ) ) {\n\t\tif ( isGenericDataType( dtype ) ) {\n\t\t\tbuf = copy( arg );\n\t\t} else if ( isBinaryDataType( dtype ) ) {\n\t\t\tbuf = array2buffer( arg ); // note: we assume that `arg` is an array of octets\n\t\t} else {\n\t\t\tbuf = typedarray( arg, dtype );\n\t\t}\n\t\treturn new ndarray( dtype, buf, [ buf.length ], [ 1 ], 0, resolveOrder( opts ), opts );\n\t}\n\t// Case: new Vector( ArrayBuffer )\n\tif ( isArrayBuffer( arg ) ) {\n\t\treturn arraybuffer2vector( dtype, arg, arg.byteLength/bytesPerElement( dtype ), 1, 0, resolveOrder( opts ), opts );\n\t}\n\t// Case: new Vector( Iterable )\n\tif ( isIterableLike( arg ) ) {\n\t\tif ( isGenericDataType( dtype ) ) {\n\t\t\tbuf = iterator2array( arg );\n\t\t} else if ( isBinaryDataType( dtype ) ) {\n\t\t\tbuf = array2buffer( iterator2array( arg ) ); // note: the temporary array is necessary as we cannot allocate a `Buffer` in advance due to the iterator's indeterminate length\n\t\t} else {\n\t\t\tbuf = typedarray( arg, dtype );\n\t\t}\n\t\treturn new ndarray( dtype, buf, [ buf.length ], [ 1 ], 0, resolveOrder( opts ), opts );\n\t}\n\t// Case: new Vector( options )\n\tif ( options === null && isPlainObject( arg ) ) {\n\t\tbuf = buffer( dtype, 0 );\n\t\treturn new ndarray( dtype, buf, [ buf.length ], [ 1 ], 0, resolveOrder( arg ), arg );\n\t}\n\treturn null;\n}\n\n\n// MAIN //\n\n/**\n* Creates a vector (i.e., a one-dimensional ndarray).\n*\n* @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or iterable\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @param {string} [dtype='float64'] - data type\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=false] - boolean indicating whether to return a read-only vector\n* @param {string} [options.mode='throw'] - specifies how to handle indices which exceed vector dimensions\n* @param {string} [options.order='row-major'] - memory layout (either row-major or column-major)\n* @throws {TypeError} first argument must be either a length, typed array, array-like object, buffer, iterable, data type, or options object\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} one-dimensional ndarray\n*\n* @example\n* var v = new Vector();\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 0\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var v = new Vector( 2 );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var v = new Vector( [ 1.0, 2.0 ] );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var v = new Vector( [ 1.0, 2.0 ], 'float32' );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*\n* var dt = v.dtype;\n* // returns 'float32'\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = new Vector( buf );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 4\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = new Vector( buf, 16 );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* var buf = new ArrayBuffer( 64 );\n* var v = new Vector( buf, 16, 2 );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*/\nfunction Vector() {\n\tvar nargs;\n\tvar arg0;\n\tvar arg1;\n\tvar arg2;\n\tvar arg3;\n\tvar arg4;\n\tvar buf;\n\tvar out;\n\n\tnargs = arguments.length;\n\n\t// Case: new Vector()\n\tif ( nargs === 0 ) {\n\t\tbuf = buffer( DEFAULT_DTYPE, 0 );\n\t\treturn new ndarray( DEFAULT_DTYPE, buf, [ buf.length ], [ 1 ], 0, DEFAULT_ORDER );\n\t}\n\targ0 = arguments[ 0 ];\n\n\t// Case: new Vector( arg0 );\n\tif ( nargs === 1 ) {\n\t\tif ( isDataType( arg0 ) ) {\n\t\t\treturn vectorWithDType( 0, arg0, null );\n\t\t}\n\t\tout = vectorWithDType( arg0, DEFAULT_DTYPE, null );\n\t\tif ( out === null ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, iterable, data type, or options object. Value: `%s`.', arg0 ) );\n\t\t}\n\t\treturn out;\n\t}\n\targ1 = arguments[ 1 ];\n\n\t// Case: new Vector( arg0, arg1 )\n\tif ( nargs === 2 ) {\n\t\t// Case: new Vector( dtype, options )\n\t\tif ( isDataType( arg0 ) ) {\n\t\t\treturn vectorWithDType( 0, arg0, arg1 );\n\t\t}\n\t\t// Case: new Vector( arg0, dtype )\n\t\tif ( isDataType( arg1 ) ) {\n\t\t\tout = vectorWithDType( arg0, arg1, null );\n\t\t\tif ( out === null ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a length, ArrayBuffer, typed array, array-like object, or iterable. Value: `%s`.', arg0 ) );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\t// Case: new Vector( ArrayBuffer, byteOffset )\n\t\tif ( isNonNegativeInteger( arg1 ) ) {\n\t\t\tif ( !isArrayBuffer( arg0 ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ArrayBuffer. Value: `%s`.', arg0 ) );\n\t\t\t}\n\t\t\treturn arraybuffer2vector( DEFAULT_DTYPE, arg0, (arg0.byteLength-arg1)/bytesPerElement( DEFAULT_DTYPE ), 1, arg1, DEFAULT_ORDER );\n\t\t}\n\t\t// Case: new Vector( arg0, options )\n\t\tout = vectorWithDType( arg0, DEFAULT_DTYPE, arg1 );\n\t\tif ( out === null ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a length, ArrayBuffer, typed array, array-like object, or iterable. Value: `%s`.', arg0 ) );\n\t\t}\n\t\treturn out;\n\t}\n\targ2 = arguments[ 2 ];\n\n\t// Case: new Vector( arg0, arg1, arg2 )\n\tif ( nargs === 3 ) {\n\t\t// Case: new Vector( ArrayBuffer, byteOffset, dtype )\n\t\tif ( isDataType( arg2 ) ) {\n\t\t\tif ( !isArrayBuffer( arg0 ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ArrayBuffer. Value: `%s`.', arg0 ) );\n\t\t\t}\n\t\t\tif ( !isNonNegativeInteger( arg1 ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Byte offset must be a nonnegative integer. Value: `%s`.', arg1 ) );\n\t\t\t}\n\t\t\treturn arraybuffer2vector( arg2, arg0, (arg0.byteLength-arg1)/bytesPerElement( arg2 ), 1, arg1, DEFAULT_ORDER );\n\t\t}\n\t\t// Case: new Vector( arg0, dtype, options )\n\t\tif ( isDataType( arg1 ) ) {\n\t\t\tout = vectorWithDType( arg0, arg1, arg2 );\n\t\t\tif ( out === null ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a length, ArrayBuffer, typed array, array-like object, or iterable. Value: `%s`.', arg0 ) );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\t// Case: new Vector( ArrayBuffer, byteOffset, arg2 )\n\t\tif ( !isArrayBuffer( arg0 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ArrayBuffer. Value: `%s`.', arg0 ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( arg1 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Byte offset must be a nonnegative integer. Value: `%s`.', arg1 ) );\n\t\t}\n\t\t// Case: new Vector( ArrayBuffer, byteOffset, options )\n\t\tif ( isPlainObject( arg2 ) ) {\n\t\t\treturn arraybuffer2vector( DEFAULT_DTYPE, arg0, (arg0.byteLength-arg1)/bytesPerElement( DEFAULT_DTYPE ), 1, arg1, resolveOrder( arg2 ), arg2 );\n\t\t}\n\t\t// Case: new Vector( ArrayBuffer, byteOffset, length )\n\t\tif ( !isNonNegativeInteger( arg2 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Length must be a nonnegative integer. Value: `%s`.', arg2 ) );\n\t\t}\n\t\treturn arraybuffer2vector( DEFAULT_DTYPE, arg0, arg2, 1, arg1, DEFAULT_ORDER );\n\t}\n\targ3 = arguments[ 3 ];\n\n\t// Case: new Vector( ArrayBuffer, byteOffset, arg2, arg3 )\n\tif ( nargs === 4 ) {\n\t\tif ( !isArrayBuffer( arg0 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ArrayBuffer. Value: `%s`.', arg0 ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( arg1 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Byte offset must be a nonnegative integer. Value: `%s`.', arg1 ) );\n\t\t}\n\t\t// Case: new Vector( ArrayBuffer, byteOffset, length, dtype )\n\t\tif ( isNonNegativeInteger( arg2 ) ) {\n\t\t\tif ( isDataType( arg3 ) ) {\n\t\t\t\treturn arraybuffer2vector( arg3, arg0, arg2, 1, arg1, DEFAULT_ORDER );\n\t\t\t}\n\t\t\t// Case: new Vector( ArrayBuffer, byteOffset, length, options )\n\t\t\tif ( !isPlainObject( arg3 ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', arg3 ) );\n\t\t\t}\n\t\t\treturn arraybuffer2vector( DEFAULT_DTYPE, arg0, arg2, 1, arg1, resolveOrder( arg3 ), arg3 );\n\t\t}\n\t\t// Case: new Vector( ArrayBuffer, byteOffset, dtype, options )\n\t\tif ( !isDataType( arg2 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a recognized/supported data type. Value: `%s`.', arg2 ) );\n\t\t}\n\t\tif ( !isPlainObject( arg3 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', arg3 ) );\n\t\t}\n\t\treturn arraybuffer2vector( arg2, arg0, (arg0.byteLength-arg1)/bytesPerElement( arg2 ), 1, arg1, resolveOrder( arg3 ), arg3 );\n\t}\n\targ4 = arguments[ 4 ];\n\n\t// Case: new Vector( ArrayBuffer, byteOffset, length, dtype, options )\n\tif ( !isArrayBuffer( arg0 ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ArrayBuffer. Value: `%s`.', arg0 ) );\n\t}\n\tif ( !isNonNegativeInteger( arg1 ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Byte offset must be a nonnegative integer. Value: `%s`.', arg1 ) );\n\t}\n\tif ( !isNonNegativeInteger( arg2 ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Length must be a nonnegative integer. Value: `%s`.', arg2 ) );\n\t}\n\tif ( !isDataType( arg3 ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a recognized/supported data type. Value: `%s`.', arg3 ) );\n\t}\n\tif ( !isPlainObject( arg4 ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', arg4 ) );\n\t}\n\treturn arraybuffer2vector( arg3, arg0, arg2, 1, arg1, resolveOrder( arg4 ), arg4 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = Vector;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a vector (i.e., a one-dimensional ndarray).\n*\n* @module @stdlib/ndarray-vector-ctor\n*\n* @example\n* var Vector = require( '@stdlib/ndarray-vector-ctor' );\n*\n* var v = new Vector();\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 0\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var Vector = require( '@stdlib/ndarray-vector-ctor' );\n*\n* var v = new Vector( 2 );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var Vector = require( '@stdlib/ndarray-vector-ctor' );\n*\n* var v = new Vector( [ 1.0, 2.0 ] );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var Vector = require( '@stdlib/ndarray-vector-ctor' );\n*\n* var v = new Vector( [ 1.0, 2.0 ], 'float32' );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*\n* var dt = v.dtype;\n* // returns 'float32'\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var Vector = require( '@stdlib/ndarray-vector-ctor' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = new Vector( buf );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 4\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var Vector = require( '@stdlib/ndarray-vector-ctor' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = new Vector( buf, 16 );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var Vector = require( '@stdlib/ndarray-vector-ctor' );\n*\n* var buf = new ArrayBuffer( 64 );\n* var v = new Vector( buf, 16, 2 );\n* // returns <ndarray>\n*\n* var len = v.length;\n* // returns 2\n*\n* var dt = v.dtype;\n* // returns 'float64'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "isIterableLike", "isCollection", "isArrayBuffer", "isPlainObject", "isBuffer", "isDataType", "hasOwnProp", "buffer", "typedarray", "copy", "ndarray", "defaults", "strides2offset", "arraybuffer2buffer", "array2buffer", "copyBuffer", "iterator2array", "bytesPerElement", "format", "DEFAULT_DTYPE", "DEFAULT_ORDER", "isGenericDataType", "dtype", "isBinaryDataType", "resolveOrder", "options", "arraybuffer2vector", "length", "stride", "byteOffset", "order", "buf", "sh", "st", "N", "o", "vectorWithDType", "arg", "opts", "Vector", "nargs", "arg0", "arg1", "arg2", "arg3", "arg4", "out", "main"]
}
